--CREATION OF DW AND CONVERTING TO FACTS AND DIMENSIONS

CREATE SCHEMA DW;

--------------------------------------DIMENSION TABLES------------------------------------


--TIME DM


CREATE PROCEDURE DW_CDW_SAPP_TIME
AS
BEGIN
	MERGE INTO DW.CDW_SAPP_D_TIME AS TARGET 
	USING STAGING.CDW_SAPP_TIME AS SOURCE
	ON TARGET.TIMEID = SOURCE.TIMEID

	WHEN MATCHED AND (TARGET.DAY != SOURCE.DAY OR
		TARGET.MONTH != SOURCE.MONTH OR
		TARGET.QUARTER != SOURCE.QUARTER OR
		TARGET.YEAR != SOURCE.YEAR )
	THEN UPDATE SET
		TARGET.DAY=SOURCE.DAY, 
		TARGET.MONTH=SOURCE.MONTH,
		TARGET.QUARTER=SOURCE.QUARTER,
		TARGET.YEAR= SOURCE.YEAR

	WHEN NOT MATCHED THEN 
	INSERT(TIMEID,DAY,MONTH,QUARTER,YEAR)VALUES(SOURCE.TIMEID,SOURCE.DAY,SOURCE.MONTH,SOURCE.QUARTER,SOURCE.YEAR);

TRUNCATE TABLE STAGING.CDW_SAPP_TIME;
TRUNCATE TABLE LANDING.CDW_SAPP_D_CALENDAR;

END





--SUPPLIER TABLE


CREATE TABLE DW.CDW_SAPP_D_SUPPLIER(
	SUPPLIER_ID INT IDENTITY(10001,1),
	SUPPLIER_NAME	VARCHAR(50) NULL,
	SUPPLIER_SSN	INTEGER NULL,
	SUPPLIER_PHONE	VARCHAR(12) NULL,
	SUPPLIER_LOC	VARCHAR(30) NULL
);

CREATE PROCEDURE DW_CDW_SAPP_SUPPLIER
AS
BEGIN
	MERGE DW.CDW_SAPP_D_SUPPLIER AS TARGET
	USING  STAGING.CDW_SAPP_SUPPLIER  AS SOURCE
	ON TARGET.SUPPLIER_SSN = SOURCE.SUPPLIER_SSN
	
	WHEN MATCHED AND 
		(TARGET.SUPPLIER_NAME != SOURCE.SUPPLIER_NAME OR
		TARGET.SUPPLIER_PHONE != SOURCE.SUPPLIER_PHONE  OR
		TARGET.SUPPLIER_LOC != SOURCE.SUPPLIER_LOC)
	THEN UPDATE SET
		TARGET.SUPPLIER_NAME  = SOURCE.SUPPLIER_NAME  ,
		TARGET.SUPPLIER_PHONE = SOURCE.SUPPLIER_PHONE ,
		TARGET.SUPPLIER_LOC = SOURCE.SUPPLIER_LOC

	WHEN NOT MATCHED THEN 
	INSERT (SUPPLIER_NAME, SUPPLIER_SSN, SUPPLIER_PHONE, SUPPLIER_LOC) VALUES (SOURCE.SUPPLIER_NAME ,SOURCE.SUPPLIER_SSN ,SOURCE.SUPPLIER_PHONE ,SOURCE.SUPPLIER_LOC);


TRUNCATE TABLE LANDING.CDW_SAPP_SUPPLIER;
TRUNCATE TABLE STAGING.CDW_SAPP_SUPPLIER;

END



--PRODUCT TABLE


CREATE TABLE DW.CDW_SAPP_D_PRODUCT (
	PRODUCT_CODE BIGINT NOT NULL,
	PRODUCT_NAME NVARCHAR(25) NULL,
	SUPPLIER_ID BIGINT NULL,
	PRODUCT_PRICE FLOAT NULL,
	);

CREATE PROCEDURE DW_CDW_SAPP_PRODUCT
AS
BEGIN
	MERGE DW.CDW_SAPP_D_PRODUCT AS TARGET
	USING(SELECT DISTINCT P.PRODUCT_CODE ,P.PRODUCT_NAME,S.SUPPLIER_ID,P.PRODUCT_PRICE
			FROM STAGING.CDW_SAPP_PRODUCT  P
			INNER JOIN DW.CDW_SAPP_D_SUPPLIER S
			ON P.SUPPLIER_SSN = S.SUPPLIER_SSN
			) AS SOURCE
	ON TARGET.PRODUCT_CODE = SOURCE.PRODUCT_CODE

	WHEN MATCHED AND 
		(TARGET.PRODUCT_NAME != SOURCE.PRODUCT_NAME OR
		TARGET.SUPPLIER_ID != SOURCE.SUPPLIER_ID OR
		TARGET.PRODUCT_PRICE != SOURCE.PRODUCT_PRICE)
	THEN UPDATE SET
		TARGET.PRODUCT_NAME = SOURCE.PRODUCT_NAME ,
		TARGET.SUPPLIER_ID = SOURCE.SUPPLIER_ID ,
		TARGET.PRODUCT_PRICE = SOURCE.PRODUCT_PRICE

	WHEN NOT MATCHED THEN 
	INSERT VALUES(
	SOURCE.PRODUCT_CODE ,SOURCE.PRODUCT_NAME,SOURCE.SUPPLIER_ID,SOURCE.PRODUCT_PRICE);

TRUNCATE TABLE STAGING.CDW_SAPP_PRODUCT;
TRUNCATE TABLE LANDING.CDW_SAPP_PRODUCT;
END






--BRANCH TABLE


CREATE TABLE DW.CDW_SAPP_D_BRANCH (
 
BRANCH_CODE BIGINT  PRIMARY KEY NOT NULL, 
BRANCH_NAME NVARCHAR(MAX),
BRANCH_STREET NVARCHAR(MAX),
BRANCH_CITY NVARCHAR(MAX),
BRANCH_STATE NVARCHAR(MAX),
BRANCH_ZIP NVARCHAR(MAX),
BRANCH_PHONE NVARCHAR(MAX)
);
 
 GO
CREATE PROCEDURE DW_CDW_SAPP_BRANCH
AS
BEGIN
  MERGE DW.CDW_SAPP_D_BRANCH AS TARGET
  USING STAGING.CDW_SAPP_BRANCH AS SOURCE
  ON TARGET.BRANCH_CODE = SOURCE.BRANCH_CODE
WHEN MATCHED AND (TARGET.BRANCH_NAME!=SOURCE.BRANCH_NAME OR
  TARGET.BRANCH_STREET!=SOURCE.BRANCH_STREET OR
  TARGET.BRANCH_CITY!=SOURCE.BRANCH_CITY OR
    TARGET.BRANCH_STATE!=SOURCE.BRANCH_STATE OR
  TARGET.BRANCH_ZIP!=COALESCE(SOURCE.BRANCH_ZIP, 999999) OR
  TARGET.BRANCH_PHONE!=CONCAT('(',SUBSTRING(SOURCE.BRANCH_PHONE,1,3),')',SUBSTRING(SOURCE.BRANCH_PHONE,4,3),'-',SUBSTRING(SOURCE.BRANCH_PHONE,7,4)))

  THEN UPDATE SET
    TARGET.BRANCH_NAME = SOURCE.BRANCH_NAME,
    TARGET.BRANCH_STREET=SOURCE.BRANCH_STREET,
    TARGET.BRANCH_CITY = SOURCE.BRANCH_CITY,
    TARGET.BRANCH_STATE = SOURCE.BRANCH_STATE,
    TARGET.BRANCH_ZIP= COALESCE(SOURCE.BRANCH_ZIP, 999999),
    TARGET.BRANCH_PHONE=CONCAT('(',SUBSTRING(SOURCE.BRANCH_PHONE,1,3),')',SUBSTRING(SOURCE.BRANCH_PHONE,4,3),'-',SUBSTRING(SOURCE.BRANCH_PHONE,7,4))
  WHEN NOT MATCHED THEN 
  INSERT VALUES(SOURCE.BRANCH_CODE,SOURCE.BRANCH_NAME,SOURCE.BRANCH_STREET, SOURCE.BRANCH_CITY,SOURCE.BRANCH_STATE,
  COALESCE(SOURCE.BRANCH_ZIP, 999999),CONCAT('(',SUBSTRING(SOURCE.BRANCH_PHONE,1,3),')',SUBSTRING(SOURCE.BRANCH_PHONE,4,3),'-',SUBSTRING(SOURCE.BRANCH_PHONE,7,4)));


TRUNCATE TABLE LANDING.CDW_SAPP_BRANCH;
TRUNCATE TABLE STAGING.CDW_SAPP_BRANCH;

END


--CUSTOMER TABLE

CREATE TABLE DW.CDW_SAPP_D_CUSTOMER(
	CUST_ID INT IDENTITY(10001,1) NOT NULL,
	CUST_F_NAME VARCHAR(40), 
	CUST_M_NAME VARCHAR(40), 
	CUST_L_NAME VARCHAR(40),  
	CUST_SSN VARCHAR(10), 
	CUST_STREET VARCHAR(30),
	CUST_CITY VARCHAR(30),
	CUST_STATE VARCHAR(30),
	CUST_COUNTRY VARCHAR(30),
	CUST_ZIP VARCHAR(7),
	CUST_PHONE VARCHAR(13),
	CUST_EMAIL VARCHAR(40),
	CREATED_DATE DATETIME,
	END_DATE DATETIME
);

 GO
CREATE PROCEDURE CDW_D_CUSTOMER AS
BEGIN
	
	DECLARE @TODAY DATETIME, @YESTERDAY DATETIME
    SELECT @TODAY = GETDATE()
    SELECT @YESTERDAY = DATEADD(DD, -1, @TODAY)
 
	INSERT INTO DW.CDW_SAPP_D_CUSTOMER (CUST_F_NAME,CUST_M_NAME,CUST_L_NAME,CUST_SSN,CUST_STREET,CUST_CITY,CUST_STATE,CUST_COUNTRY,CUST_ZIP,CUST_PHONE,CUST_EMAIL,CREATED_DATE)
	SELECT CUST_F_NAME,CUST_M_NAME,CUST_L_NAME,SSN,CUST_STREET,CUST_CITY,CUST_STATE,CUST_COUNTRY,CUST_ZIP,CUST_PHONE,CUST_EMAIL,CREATED_DATE
	FROM (
	MERGE DW.CDW_SAPP_D_CUSTOMER AS TARGET
	USING STAGING.CDW_SAPP_CUSTOMER AS SOURCE
	ON TARGET.CUST_SSN=SOURCE.SSN 
	WHEN NOT MATCHED THEN
	INSERT  (CUST_F_NAME,CUST_M_NAME,CUST_L_NAME,CUST_SSN,CUST_STREET,CUST_CITY,CUST_STATE,CUST_COUNTRY,CUST_ZIP,CUST_PHONE,CUST_EMAIL,CREATED_DATE) 
	VALUES (UPPER(LEFT(SOURCE.FIRST_NAME, 1)) + LOWER(SUBSTRING(SOURCE.FIRST_NAME, 2, LEN(SOURCE.FIRST_NAME))),LOWER(SOURCE.MIDDLE_NAME),UPPER(LEFT(SOURCE.LAST_NAME, 1)) + LOWER(SUBSTRING(SOURCE.LAST_NAME, 2, LEN(SOURCE.LAST_NAME))),
	SOURCE.SSN,CONCAT(SOURCE.APT_NO,SOURCE.STREET_NAME),SOURCE.CUST_CITY,SOURCE.CUST_STATE,SOURCE.CUST_COUNTRY,SOURCE.CUST_ZIP,CONCAT(SUBSTRING(SOURCE.CUST_PHONE,1,3),'-',SUBSTRING(SOURCE.CUST_PHONE,4,3),'-',SUBSTRING(SOURCE.CUST_PHONE,7,4)),
	SOURCE.CUST_EMAIL,SOURCE.LOAD_DATE)
 
	WHEN MATCHED  AND (
        TARGET.CUST_F_NAME != UPPER(LEFT(SOURCE.FIRST_NAME, 1)) + LOWER(SUBSTRING(SOURCE.FIRST_NAME, 2, LEN(SOURCE.FIRST_NAME))) OR
        TARGET.CUST_M_NAME !=  LOWER(SOURCE.MIDDLE_NAME) OR
        TARGET.CUST_L_NAME != UPPER(LEFT(SOURCE.LAST_NAME, 1)) + LOWER(SUBSTRING(SOURCE.LAST_NAME, 2, LEN(SOURCE.LAST_NAME)))  OR
        TARGET.CUST_STREET != CONCAT(SOURCE.APT_NO, SOURCE.STREET_NAME) OR
        TARGET.CUST_CITY!= SOURCE.CUST_CITY OR
        TARGET.CUST_STATE != SOURCE.CUST_STATE OR
        TARGET.CUST_COUNTRY != SOURCE.CUST_COUNTRY OR
        TARGET.CUST_ZIP != SOURCE.CUST_ZIP OR
        TARGET.CUST_PHONE != CONCAT(SUBSTRING(SOURCE.CUST_PHONE,1,3),'-',SUBSTRING(SOURCE.CUST_PHONE,4,3),'-',SUBSTRING(SOURCE.CUST_PHONE,7,4)) OR
        TARGET.CUST_EMAIL != SOURCE.CUST_EMAIL )
	--AND TARGET.END_DATE IS NULL
	THEN UPDATE SET 
	TARGET.END_DATE=GETDATE()
	OUTPUT (UPPER(LEFT(SOURCE.FIRST_NAME, 1)) + LOWER(SUBSTRING(SOURCE.FIRST_NAME, 2, LEN(SOURCE.FIRST_NAME)))) AS CUST_F_NAME, 
			(LOWER(SOURCE.MIDDLE_NAME)) AS CUST_M_NAME, 
			(UPPER(LEFT(SOURCE.LAST_NAME, 1)) + LOWER(SUBSTRING(SOURCE.LAST_NAME, 2, LEN(SOURCE.LAST_NAME)))) AS CUST_L_NAME,
			SOURCE.SSN,
			CONCAT(SOURCE.APT_NO,SOURCE.STREET_NAME) AS CUST_STREET,
			SOURCE.CUST_CITY,
			SOURCE.CUST_STATE,
			SOURCE.CUST_COUNTRY,
			SOURCE.CUST_ZIP,
			(CONCAT(SUBSTRING(SOURCE.CUST_PHONE,1,3),'-',SUBSTRING(SOURCE.CUST_PHONE,4,3),'-',SUBSTRING(SOURCE.CUST_PHONE,7,4))) AS CUST_PHONE ,
			SOURCE.CUST_EMAIL,
			@TODAY AS CREATED_DATE, 
			$ACTION MERGEACTION ) AS MRG
	 WHERE MRG.MERGEACTION = 'UPDATE';  

TRUNCATE TABLE STAGING.CDW_SAPP_CUSTOMER;
TRUNCATE TABLE LANDING.CDW_SAPP_CUSTOMER;

END


----------------------------------------FACT TABLES------------------------------------------

CREATE TABLE DW.CDW_SAPP_F_SALES(
    SALES_KEY INTEGER NOT NULL,
	PERIOD_KEY DATETIME NOT NULL,
	CUSTOMER_KEY BIGINT NOT NULL,
	SUPPLIER_KEY BIGINT NOT NULL,
	BRANCH_CODE INTEGER NOT NULL,
	BRANCH_NAME NVARCHAR(40),
	PRODUCT_CODE BIGINT NOT NULL,
	PRODUCT_NAME NVARCHAR(40),
	SALES_SOLD_QTY INTEGER,
	SALES_TOTAL_AMOUNT FLOAT,
	CREATED_DATE DATETIME DEFAULT(GETDATE()),
	CREATED_BY NVARCHAR(40) DEFAULT('CDW_SAPP_SALES')
	);


CREATE PROCEDURE DW_SALES_MERGE 
AS
BEGIN
	MERGE DW.CDW_SAPP_F_SALES AS TARGET
	USING STAGING.CDW_SAPP_SALES AS SOURCE
	ON TARGET.SALES_KEY=SOURCE.SALES_KEY 

	WHEN MATCHED AND (
			DATEPART(DD,TARGET.PERIOD_KEY) !=SOURCE.DAY OR
			DATEPART(MM,TARGET.PERIOD_KEY) !=SOURCE.MONTH OR
			DATEPART(YYYY, TARGET.PERIOD_KEY) !=SOURCE.YEAR OR
			TARGET.CUSTOMER_KEY != SOURCE.CUSTOMER_KEY OR
			TARGET.SUPPLIER_KEY != SOURCE.SUPPLIER_KEY OR
			TARGET.BRANCH_CODE != SOURCE.BRANCH_CODE OR
			TARGET.BRANCH_NAME != SOURCE.BRANCH_NAME OR
			TARGET.PRODUCT_CODE != SOURCE.PRODUCT_CODE OR
			TARGET.PRODUCT_NAME != SOURCE.PRODUCT_NAME OR
			TARGET.SALES_SOLD_QTY !=SOURCE.SALES_SOLD_QTY OR
			TARGET.SALES_TOTAL_AMOUNT != SOURCE.SALES_TOTAL_AMOUNT
			)

	THEN UPDATE SET 
			TARGET.PERIOD_KEY = CAST(CONCAT_WS('-',SOURCE.DAY, SOURCE.MONTH, SOURCE.YEAR) AS DATETIME),
			TARGET.CUSTOMER_KEY = SOURCE.CUSTOMER_KEY,
			TARGET.SUPPLIER_KEY = SOURCE.SUPPLIER_KEY,
			TARGET.BRANCH_CODE = SOURCE.BRANCH_CODE,
			TARGET.PRODUCT_NAME = SOURCE.PRODUCT_NAME,
			TARGET.PRODUCT_CODE = SOURCE.PRODUCT_CODE,
			TARGET.SALES_SOLD_QTY = SOURCE.SALES_SOLD_QTY,
			TARGET.SALES_TOTAL_AMOUNT = SOURCE.SALES_TOTAL_AMOUNT,
			TARGET.CREATED_DATE = SOURCE.CREATED_DATE,
			TARGET.CREATED_BY = SOURCE.CREATED_BY

	WHEN NOT MATCHED

	THEN  INSERT(SALES_KEY, PERIOD_KEY, CUSTOMER_KEY, SUPPLIER_KEY, BRANCH_NAME,
				PRODUCT_NAME, SALES_SOLD_QTY, SALES_TOTAL_AMOUNT , CREATED_DATE, CREATED_BY, BRANCH_CODE, PRODUCT_CODE) 
	VALUES (SOURCE.SALES_KEY, CONCAT_WS('-',SOURCE.DAY, SOURCE.MONTH, SOURCE.YEAR), SOURCE.CUSTOMER_KEY,SOURCE.SUPPLIER_KEY, SOURCE.BRANCH_NAME,SOURCE.PRODUCT_NAME,SOURCE.SALES_SOLD_QTY,
			SOURCE.SALES_TOTAL_AMOUNT, SOURCE.CREATED_DATE,SOURCE.CREATED_BY, SOURCE.BRANCH_CODE, SOURCE.PRODUCT_CODE);

TRUNCATE TABLE STAGING.CDW_SAPP_SALES;
TRUNCATE TABLE LANDING.CDW_SAPP_SALES;


END
EXEC DW_SALES_MERGE


--AGGREGATE TABLE

CREATE TABLE CDW_SAPP_F_AGG_DATA (
	CDW_SALES_AGG_DSET_KEY INT IDENTITY(1,1),
	MONTH VARCHAR(15),
	BRANCH_CODE INT,
	BRANCH_NAME VARCHAR(25),
	PRODUCT_CODE INT,
	PRODUCT_NAME VARCHAR(25),
	TOTAL_QUANTITY INT ,
	TOTAL_AMOUNT INT,
	CREATED_DATE DATE
);
SELECT
   BRANCH_CODE
  ,BRANCH_NAME
  ,PRODUCT_CODE
  ,PRODUCT_NAME
  ,SUM(SALES_SOLD_QTY) AS TOTAL_QUANTITY
  ,SUM(SALES_TOTAL_AMOUNT) AS TOTAL_AMOUNT
  ,GETDATE() AS CREATED_DATE 
INTO DW.CDW_SAPP_F_AGG_DATA
FROM DW.CDW_SAPP_F_SALES
WHERE MONTH(PERIOD_KEY) = 1
GROUP BY 
  BRANCH_CODE
  ,BRANCH_NAME
  ,PRODUCT_CODE
  ,PRODUCT_NAME;


SELECT * FROM CDW_SAPP_F_AGG_DATA;



--REPORT QUERIES

SELECT TOP 5 PRODUCT_CODE, PRODUCT_NAME,
       SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE,
       SUM(TOTAL_QUANTITY) ,
       GETDATE() AS SYSDATE
FROM DW.CDW_SAPP_F_AGG_DATA
GROUP BY PRODUCT_CODE, PRODUCT_NAME
ORDER BY TOTAL_REVENUE DESC;




WITH HIGHEST_REVENUE_BRANCH AS (
    SELECT TOP 1 BRANCH_CODE, BRANCH_NAME
    FROM DW.CDW_SAPP_F_AGG_DATA
    ORDER BY TOTAL_AMOUNT DESC
)
SELECT HRB.BRANCH_CODE,
       HRB.BRANCH_NAME,
       SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE, GETDATE() AS SYSDATE
FROM DW.CDW_SAPP_F_AGG_DATA AGG_TABLE
JOIN HIGHEST_REVENUE_BRANCH HRB ON AGG_TABLE.BRANCH_CODE = HRB.BRANCH_CODE
GROUP BY HRB.BRANCH_CODE, HRB.BRANCH_NAME;
